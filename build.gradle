plugins {
    id "java-library"
    id "idea"
}

base {
    java.toolchain.languageVersion = JavaLanguageVersion.of(21)
    compileJava.options.encoding = compileTestJava.options.encoding = javadoc.options.encoding = "UTF-8"

    group = project.maven_group ?: rootProject.maven_group
    archivesName = project.maven_name ?: rootProject.maven_name
    version = project.maven_version ?: rootProject.maven_version
}

configurations {
    include

    implementation.extendsFrom include
    api.extendsFrom include
}

repositories {
    mavenCentral()
    maven {
        name = "ViaVersion"
        url = "https://repo.viaversion.com"
    }
    maven {
        name = "Lenni0451"
        url = "https://maven.lenni0451.net/everything"
    }
    maven {
        name = "DirtPowered Releases"
        url = "https://repo.mzga.dev/releases"
    }
    maven {
        name = "DirtPowered Snapshots"
        url = "https://repo.mzga.dev/snapshots"
    }
    maven {
        name = "Jitpack"
        url = "https://jitpack.io"

        content {
            includeGroup "com.github.steveice10"
        }
    }
}

dependencies {
    implementation "net.raphimc:ViaProxy:3.4.1"

    include "dev.mzga:Beta2Release:1.0.6-SNAPSHOT"
}

processResources {
    inputs.property "version", project.version

    filesMatching("viaproxy.yml") {
        expand "version": project.version
    }
}

jar {
    dependsOn configurations.include
    from {
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        configurations.include.collect {
            zipTree(it)
        }
    } {
        exclude "META-INF/*.RSA", "META-INF/*.SF", "META-INF/*.DSA", "io/netty/", "org/apache/logging/"
    }

    from("LICENSE") {
        rename { "${it}_${project.name ?: rootProject.name}" }
    }
}

idea {
    module {
        ["run"].each {
            excludeDirs << file("$it")
        }
    }
}

tasks.register("runViaProxy", JavaExec) {
    dependsOn tasks.jar

    mainClass = "net.raphimc.viaproxy.ViaProxy"
    classpath = sourceSets.main.compileClasspath
    workingDir = file("run")
    jvmArgs = ["-DskipUpdateCheck"]

    doFirst {
        def pluginsDir = file("$workingDir/plugins")
        pluginsDir.mkdirs()
        file("$pluginsDir/${project.name}.jar").bytes = tasks.jar.archiveFile.get().asFile.bytes
    }

    doLast {
        file("$workingDir/plugins/${project.name}.jar").delete()
        file("$workingDir/logs").deleteDir()
    }
}
